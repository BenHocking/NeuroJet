@CreateVar(
  TI.SequenceLength ^Calc(^(Period)*3)
  TI.Continue 1
  TI.Criteria 80
  TI.NumSessions 0
  TI.MeanSuccess 0 # Only used for phase 5
)

# TI.NumStimuli can be either 5 or 6
?If (~exists[TI.NumStimuli]) {
  @CreateVar(TI.NumStimuli 5) # A, B, C, D, E
}
@CreateVar(TI.TrainPairs ^Calc(^(TI.NumStimuli)-1))

@CreateVar(halfme ^Calc(^(me)/2))
@CreateVar(halfplusme ^Calc(^(me)/5))

@CreateVar(Start 1)
@MakeSequence(-name A -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name B -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name C -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name D -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name E -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
?If (^(TI.NumStimuli) = 6) {
  @MakeSequence(-name F -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
  @SetVar(Start ^Calc(^(Start) + ^(halfme)))
}
@MakeSequence(-name W -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name X -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name Y -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name Z -len ^(Period) -non ^(halfme) -st ^(Period) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))

@MakeSequence(-name a -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name a.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name b -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name b.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name c -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name c.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name d -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name d.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name e -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name e.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name w -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name w.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name x -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name x.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name y -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name y.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name z -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name z.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (^(TI.NumStimuli) = 6) {
  @MakeSequence(-name f -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
  @MakeSequence(-name f.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
  @SetVar(Start ^Calc(^(Start) + ^(me)))
}

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @SetVar(
    ^(DecisionFn):.PlusBegin  ^(Start)
    ^(DecisionFn):.PlusEnd    ^Calc(^(Start) + ^(me) - 1)
  )
}
@MakeSequence(-name plus -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name plus.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@MakeSequence(-name halfplus -len ^(TI.SequenceLength) -non ^(halfplusme)
              -st ^(TI.SequenceLength) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @SetVar(
    ^(DecisionFn):.MinusBegin ^(Start)
    ^(DecisionFn):.MinusEnd   ^Calc(^(Start) + ^(me) - 1)
  )
}
@MakeSequence(-name minus -len ^(Period) -non ^(me) -st ^(Period) -Nstart ^(Start))
@MakeSequence(-name minus.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (~strcmp[^(DecisionFn), Decision]) {
  @AppendData(-to ab.sim -from 2 a.sim b.sim -type mat)
  @AppendData(-to bc.sim -from 2 b.sim c.sim -type mat)
  @AppendData(-to cd.sim -from 2 c.sim d.sim -type mat)
  @AppendData(-to de.sim -from 2 d.sim e.sim -type mat)
  @AppendData(-to bd.sim -from 2 b.sim d.sim -type mat)
  @AppendData(-to wx.sim -from 2 w.sim x.sim -type mat)
  @AppendData(-to yz.sim -from 2 y.sim z.sim -type mat)
  ?If (^(TI.NumStimuli) = 5) {
    @AppendData(-to ae.sim -from 2 a.sim e.sim -type mat)
  }
  ?If (^(TI.NumStimuli) = 6) {
    @AppendData(-to ef.sim -from 2 e.sim f.sim -type mat)
    @AppendData(-to af.sim -from 2 a.sim f.sim -type mat)
    @AppendData(-to be.sim -from 2 b.sim e.sim -type mat)
  }
}
?If (~strcmp[^(DecisionFn), DecisionComplex] | ~strcmp[^(DecisionFn), Decision4]) {
  @AppendData(-to ab.sim -from 4 a.sim b.sim plus.sim minus.sim -type mat)
  @AppendData(-to bc.sim -from 4 b.sim c.sim plus.sim minus.sim -type mat)
  @AppendData(-to cd.sim -from 4 c.sim d.sim plus.sim minus.sim -type mat)
  @AppendData(-to de.sim -from 4 d.sim e.sim plus.sim minus.sim -type mat)
  @AppendData(-to bd.sim -from 4 b.sim d.sim plus.sim minus.sim -type mat)
  @AppendData(-to wx.sim -from 4 w.sim x.sim plus.sim minus.sim -type mat)
  @AppendData(-to yz.sim -from 4 y.sim z.sim plus.sim minus.sim -type mat)
  ?If (^(TI.NumStimuli) = 5) {
    @AppendData(-to ae.sim -from 4 a.sim e.sim plus.sim minus.sim -type mat)
  }
  ?If (^(TI.NumStimuli) = 6) {
    @AppendData(-to ef.sim -from 4 e.sim f.sim plus.sim minus.sim -type mat)
    @AppendData(-to af.sim -from 4 a.sim f.sim plus.sim minus.sim -type mat)
    @AppendData(-to be.sim -from 4 b.sim e.sim plus.sim minus.sim -type mat)
  }
}

@MakeSequence(-name blank -len ^(Period) -non 0 -st ^(Period) -Nstart ^(Start))

@CombineData(-to AB -type seq -method | -from 2 A B)
@CombineData(-to BC -type seq -method | -from 2 B C)
@CombineData(-to CD -type seq -method | -from 2 C D)
@CombineData(-to DE -type seq -method | -from 2 D E)
@CombineData(-to BD -type seq -method | -from 2 B D)
@CombineData(-to WX -type seq -method | -from 2 W X)
@CombineData(-to YZ -type seq -method | -from 2 Y Z)
?If (^(TI.NumStimuli) = 5) {
  @CombineData(-to AE -type seq -method | -from 2 A E)
}
?If (^(TI.NumStimuli) = 6) {
  @CombineData(-to EF -type seq -method | -from 2 E F)
  @CombineData(-to AF -type seq -method | -from 2 A F)
  @CombineData(-to BE -type seq -method | -from 2 B E)
}

@AppendData(-to ABaplus -from 3 AB a plus)
@AppendData(-to ABbminus -from 3 AB b minus)
@AppendData(-to BCbplus -from 3 BC b plus)
@AppendData(-to BCcminus -from 3 BC c minus)
@AppendData(-to CDcplus -from 3 CD c plus)
@AppendData(-to CDdminus -from 3 CD d minus)
@AppendData(-to DEdplus -from 3 DE d plus)
@AppendData(-to DEeminus -from 3 DE e minus)
@AppendData(-to BDbplus -from 3 BD b plus)
@AppendData(-to BDdminus -from 3 BD d minus)
@AppendData(-to WXwplus -from 3 WX w plus)
@AppendData(-to WXxminus -from 3 WX x minus)
@AppendData(-to YZyplus -from 3 YZ y plus)
@AppendData(-to YZzminus -from 3 YZ z minus)
?If (^(TI.NumStimuli) = 5) {
  @AppendData(-to AEaplus -from 3 AE a plus)
  @AppendData(-to AEeminus -from 3 AE e minus)
}
?If (^(TI.NumStimuli) = 6) {
  @AppendData(-to EFeplus -from 3 EF e plus)
  @AppendData(-to EFfminus -from 3 EF f minus)
  @AppendData(-to AFaplus -from 3 AF a plus)
  @AppendData(-to AFfminus -from 3 AF f minus)
  @AppendData(-to BEbplus -from 3 BE b plus)
  @AppendData(-to BEeminus -from 3 BE e minus)
}

?If (~strcmp[^(DecisionFn), Decision] | ~strcmp[^(DecisionFn), Decision4] |
     ~strcmp[^(DecisionFn), DecisionComplex]) {
  @CombineData(-to ABtest -from 2 AB halfplus -type seq -method |)
  @CombineData(-to BCtest -from 2 BC halfplus -type seq -method |)
  @CombineData(-to CDtest -from 2 CD halfplus -type seq -method |)
  @CombineData(-to DEtest -from 2 DE halfplus -type seq -method |)
  @CombineData(-to BDtest -from 2 BD halfplus -type seq -method |)
  @CombineData(-to WXtest -from 2 WX halfplus -type seq -method |)
  @CombineData(-to YZtest -from 2 YZ halfplus -type seq -method |)
  ?If (^(TI.NumStimuli) = 5) {
    @CombineData(-to AEtest -from 2 AE halfplus -type seq -method |)
  }
  ?If (^(TI.NumStimuli) = 6) {
    @CombineData(-to EFtest -from 2 EF halfplus -type seq -method |)
    @CombineData(-to AFtest -from 2 AF halfplus -type seq -method |)
    @CombineData(-to BEtest -from 2 BE halfplus -type seq -method |)
  }
}

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @AppendData(-to ABcorrect -from 3 AB a blank)
  @AppendData(-to ABwrong -from 3 AB b blank)
  @AppendData(-to BCcorrect -from 3 BC b blank)
  @AppendData(-to BCwrong -from 3 BC c blank)
  @AppendData(-to CDcorrect -from 3 CD c blank)
  @AppendData(-to CDwrong -from 3 CD d blank)
  @AppendData(-to DEcorrect -from 3 DE d blank)
  @AppendData(-to DEwrong -from 3 DE e blank)
  @AppendData(-to BDcorrect -from 3 BD b blank)
  @AppendData(-to BDwrong -from 3 BD d blank)
  @AppendData(-to WXcorrect -from 3 WX w blank)
  @AppendData(-to WXwrong -from 3 WX x blank)
  @AppendData(-to YZcorrect -from 3 YZ y blank)
  @AppendData(-to YZwrong -from 3 YZ z blank)
  ?If (^(TI.NumStimuli) = 5) {
    @AppendData(-to AEcorrect -from 3 AE a blank)
    @AppendData(-to AEwrong -from 3 AE e blank)
  }
  ?If (^(TI.NumStimuli) = 6) {
    @AppendData(-to EFcorrect -from 3 EF e blank)
    @AppendData(-to EFwrong -from 3 EF f blank)
    @AppendData(-to AFcorrect -from 3 AF a blank)
    @AppendData(-to AFwrong -from 3 AF f blank)
    @AppendData(-to BEcorrect -from 3 BE b blank)
    @AppendData(-to BEwrong -from 3 BE e blank)
  }
}
