@CreateVar(
 halfme ^Calc(^(me)/2)
 halfplusme ^Calc(^(me)/5)
)
?If (~exists[sniffDur]) {
  @CreateVar(
   sniffDur ^Calc(3*^(Period))
   chooseDur ^Calc(3*^(Period))
   eatDur ^Calc(3*^(Period))
  )
}

@CreateVar(TPSequenceLength ^Calc(^(sniffDur) + ^(chooseDur) + ^(eatDur)))

@CreateVar(Start 1)
@MakeSequence(-name A -len ^(sniffDur) -non ^(halfme) -st ^(sniffDur) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name B -len ^(sniffDur) -non ^(halfme) -st ^(sniffDur) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))
@MakeSequence(-name C -len ^(sniffDur) -non ^(halfme) -st ^(sniffDur) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(halfme)))

@MakeSequence(-name a -len ^(chooseDur) -non ^(me) -st ^(chooseDur) -Nstart ^(Start))
@MakeSequence(-name a.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name b -len ^(chooseDur) -non ^(me) -st ^(chooseDur) -Nstart ^(Start))
@MakeSequence(-name b.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

@MakeSequence(-name c -len ^(chooseDur) -non ^(me) -st ^(chooseDur) -Nstart ^(Start))
@MakeSequence(-name c.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @SetVar(
    ^(DecisionFn):.PlusBegin  ^(Start)
    ^(DecisionFn):.PlusEnd    ^Calc(^(Start) + ^(me) - 1)
  )
}
@MakeSequence(-name plus -len ^(eatDur) -non ^(me) -st ^(eatDur) -Nstart ^(Start))
@MakeSequence(-name plus.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@MakeSequence(-name halfplus -len ^(TPSequenceLength) -non ^(halfplusme)
              -st ^(TPSequenceLength) -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @SetVar(
    ^(DecisionFn):.MinusBegin ^(Start)
    ^(DecisionFn):.MinusEnd   ^Calc(^(Start) + ^(me) - 1)
  )
}
@MakeSequence(-name minus -len ^(eatDur) -non ^(me) -st ^(eatDur) -Nstart ^(Start))
@MakeSequence(-name minus.sim -len 1 -non ^(me) -st 1 -Nstart ^(Start))
@SetVar(Start ^Calc(^(Start) + ^(me)))

?If (~strcmp[^(DecisionFn), Decision]) {
  @AppendData(-to ab.sim -from 2 a.sim b.sim -type mat)
  @AppendData(-to bc.sim -from 2 b.sim c.sim -type mat)
  @AppendData(-to ca.sim -from 2 c.sim a.sim -type mat)
}
?If (~strcmp[^(DecisionFn), DecisionComplex] | ~strcmp[^(DecisionFn), Decision4]) {
  @AppendData(-to ab.sim -from 4 a.sim b.sim plus.sim minus.sim -type mat)
  @AppendData(-to bc.sim -from 4 b.sim c.sim plus.sim minus.sim -type mat)
  @AppendData(-to ca.sim -from 4 c.sim a.sim plus.sim minus.sim -type mat)
}

@MakeSequence(-name blankReward -len ^(eatDur) -non 0 -st ^(eatDur) -Nstart ^(Start))

@CombineData(-to AB -type seq -method | -from 2 A B)
@CombineData(-to BC -type seq -method | -from 2 B C)
@CombineData(-to CA -type seq -method | -from 2 C A)

@AppendData(-to ABaplus -from 3 AB a plus)
@AppendData(-to ABbminus -from 3 AB b minus)
@AppendData(-to BCbplus -from 3 BC b plus)
@AppendData(-to BCcminus -from 3 BC c minus)
@AppendData(-to CAcplus -from 3 CA c plus)
@AppendData(-to CAaminus -from 3 CA a minus)

?If (~strcmp[^(DecisionFn), Decision] | ~strcmp[^(DecisionFn), Decision4] |
     ~strcmp[^(DecisionFn), DecisionComplex]) {
  @CombineData(-to ABtest -from 2 AB halfplus -type seq -method |)
  @CombineData(-to BCtest -from 2 BC halfplus -type seq -method |)
  @CombineData(-to CAtest -from 2 CA halfplus -type seq -method |)
}

?If (~strcmp[^(DecisionFn), DecisionP]) {
  @AppendData(-to ABcorrect -from 3 AB a blankReward)
  @AppendData(-to ABwrong -from 3 AB b blankReward)
  @AppendData(-to BCcorrect -from 3 BC b blankReward)
  @AppendData(-to BCwrong -from 3 BC c blankReward)
  @AppendData(-to CAcorrect -from 3 CA c blankReward)
  @AppendData(-to CAwrong -from 3 CA a blankReward)
}
